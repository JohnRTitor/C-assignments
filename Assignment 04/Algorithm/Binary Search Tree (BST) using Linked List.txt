// WIP

#define IS_INVALID_OPTION(x) (x == 1 || x == 2 || x == 8 || x == 9 || x == 10)
#define IS_EMPTY(root) \
	({\
		if (root == NULL)\
		{\
			fprintf(stderr, "Error: Tree is empty.");\
			break;\
		}\
	})

typedef struct node
{
	int info;
	struct node *left;
	struct node *right;
} NODE;

typedef struct stackNode
{
	NODE *treeNode;
	struct stackNode *link;
} SNODE;


				Algorithm Menu - Binary Search Tree using Linked List
				
Input:- As per user's option
Output:- As per user's option
Data Structure:- Double Linked List where each node contains the data (info), link to the left and right child

Steps:-

1: Start
2: mode ← "recursion" // recursion is used by default
3: root ← NULL // initialise tree as empty
4: While (true) do
	4.1: BST ← isBST(root)
    4.2: Print "Binary Tree operations: "
    4.3: Print "0. Change Mode - current: ", mode
    4.4: If BST then
        4.4.1. Print "1. Insert a node^°, 2. Delete a node^°"
    4.5: EndIf
    4.6: Print "3. Inorder Traversal^, 4. Preorder Traversal^, 5. Postorder Traversal^, 6. Level order traversal, 7. Find the height of the tree"
    4.7: If BST then
		4.7.1: Print "8. Find the minimum element°, 9. Find the maximum element°, 10. Search element°"
    4.8: EndIf
    4.9: Print "11. Count the number of leaf nodes, 12. Count the number of non-leaf nodes, 13. Mirror tree, 14. Delete tree, 15. Exit"
    4.10: Print "^ - Affected by mode change."
    4.11: Print "° - Maybe unavailable after mirroring."
    4.12: Print "Enter an option: "
    4.13: Read option
    4.14: If not BST AND option in [1, 2, 8, 9, 10] // due to issues after mirroring, inaccessible options are to forwarded to an error message
    	4.14.1: Print "The tree is no longer a binary search tree (BST). If you have mirrored the tree, please mirror it again to fix it. Only a few options are available."
    	4.14.2: Continue
    4.15: EndIf
    4.16: Case option=0
        4.16.1: Print "Press 1 for recursive mode, or any key for iterative mode: "
        4.16.2: Read modeOption
        4.16.3: If modeOption = 1 then
        	4.16.3.1: mode ← "recursion"
        4.16.4: Else
        	4.16.4.1: mode ← "iteration"
        4.16.5: EndIf
    4.17: EndCase
	4.18: Case option = 1
		4.18.1: insertNode(root, mode)
	4.19: EndCase
	4.20: Case option = 2
		4.20.1: deleteNode(root, mode)
	4.21: EndCase
	4.22: Case option = 3
		4.22.1: inorderTraversal(root, mode)
	4.23: EndCase
	4.24: Case option = 4
		4.24.1: preorderTraversal(root, mode)
	4.25: EndCase
	4.26: Case option = 5
		4.26.1; postorderTraversal(root, mode)
	4.27: EndCase
	4.28: Case option = 6
		4.28.1: levelOrderTraversal(root);
	4.29: EndCase
	4.30: Case option = 7
		4.30.1: Print "Height of the tree is ", getHeight(root)
	4.31: EndCase
	4.32: Case option = 8
		4.32.1: loc ← findMin(root)
		4.32.2: Print "The minimum element of the tree is ", loc→info
	4.33: EndCase
	4.34: Case option = 9
		4.34.1: loc ← findMax(root)
		4.34.2: Print "The maximum element of the tree is ", loc→info
	4.35: EndCase
	4.36: Case option = 10
		4.36.1: Print "Which element to search?"
        4.36.2: Read data
		4.36.3: searchNode(root, data, loc, par)
		4.36.4: If loc ≠ NULL then
        	4.36.4.1: Print data, " found in the tree."
        4.36.5: Else
        	4.36.5.1: Print data, " not found in the tree."
        4.36.6: EndIf
	4.37: EndCase
	4.38: Case option = 11
		4.38.1: Print "No of leaf nodes is: ", countLeafNodes(root)
	4.39: EndCase
	4.40: Case option = 12
		4.40.1: Print "No of non-leaf nodes is: ", countNonLeafNodes(root)
	4.41: EndCase
	4.42: Case option = 13
		4.42.1: mirrorTree(root)
		4.42.2: Print "Successfully mirrored the tree."
	4.43: EndCase
	4.44: Case option = 14
		4.44.1: eraseTree(root)
		4.44.2: Print "Successfully deleted the entire tree."
	4.45: EndCase
	4.46: Case option = 15
		4.46.1: Print "Program exited."
        4.46.2: Exit Loop
	4.47: Case Default
		4.47.1: Print "Invalid input. Please try again."
	4.48: EndCase
5: EndWhile
6: eraseTree(root)
7: Stop
			
				Procedure createNode (data)
// the function gets data externally to insert in each node

Steps:-

1: Begin Procedure
	2: newNode ← getNode(NODE)
	3: If newNode = NULL then
		3.1: Print "Error: Memory allocation failed."
		3.2: Return NULL
	4: EndIf
	5: newNode→info = data
	6: newNode→left = NULL
	7: newNode→right = NULL
	8: Return newNode
9: End Procedure


				Procedure insertNode (root, mode)

// root is the root of the binary search tree
// mode is the operation mode the user selected

Steps:-
1: Begin Procedure
	2: Print "Enter the data to be inserted: "
	3: Read data
	4: If mode = "recursion" then
		4.1: root ← insertNodeRecursive(root, data)
	5: Else
		5.1: insertNodeIterative(root, data)
	6: EndIf
	7: Print data, " successfully inserted."
8: End Procedure

				Procedure deleteNode (root, mode)

Steps:-

1: Start
	2: Print "Enter the data to be deleted: "
	3: Read data
	4: If mode = "recursion" then
		4.1: root ← deleteNodeRecursive(root, data)
	5: Else
		5.1: deleteNodeIterative(root, data)
	6: EndIf
	7: Print data, " successfully deleted."
8: End Procedure

				Procedure inorderTraversal (root, mode)

Steps:-

1: Begin Procedure
	2: Print "Inorder traversed elements are below: "
	3: If mode = "recursion" then
		3.1: inorderRecursive(root)
	4: Else
		4.1: inorderIterative(root)
	5: EndIf
6: End Procedure

				Procedure preorderTraversal (root, mode)

Steps:-

1: Begin Procedure
	2: Print "Preorder traversed elements are below: "
	3: If mode = "recursion" then
		3.1: preorderRecursive(root)
	4: Else
		4.1: preorderIterative(root)
	5: EndIf
6: End Procedure

				Procedure postorderTraversal (root, mode)

Steps:-

1: Begin Procedure
	2: Print "Postorder traversed elements are below: "
	3: If mode = "recursion" then
		3.1: postorderRecursive(root)
	4: Else
		4.1: postorderIterative(root)
	5: EndIf
6: End Procedure

				Procedure findMin (root)

// returns the address of the minimum node

Steps:-

1: Begin Procedure
	2: currrent ← root // start from the root node
	3: While current→left ≠ NULL do // keep going as left as possible
		3.1: current ← currrent→left
	4: EndWhile
	5: Return current // return the left most node which is minimum valued
6: End Procedure

				Procedure findMax (root)

// returns the address of the maximum valued node

Steps:-

1: Begin Procedure
	2: currrent ← root // start from the root node
	3: While current→right ≠ NULL do // keep going as right as possible
		3.1: current ← currrent→right
	4: EndWhile
	5: Return current // return the right most node which is the maximum valued node
6: End Procedure

				Procedure insertNodeRecursive (root, data)

// inserts a node, no duplicate element allowed, returns the address of the root
// root is the pointer to the root node, data is the data to insert

Steps:-

1: Begin Procedure
    2: If root = NULL then // the tree is empty
        2.1: Return createNode(data) // just create the root node
    3: Else If data < root→info then
        3.1: root→left ← insertNodeRecursive(root→left, data) // recursively insert in the left subtree
    4: Else If root→info < data then
        4.1: root→right ← insertNodeRecursive(root→right, data) // recursively insert in the right subtree
    5: EndIf
    6: Return root // then just return root node's address
7: End Procedure

				Procedure deleteNodeRecursive (root, data)

// deletes a node and returns the address of the root
// root is the pointer to the root node, data is the data to delete

Steps:-

1: Begin Procedure
	2: If root = NULL then // tree is empty
		2.1: Return NULL // nothing to delete
	3: Else If data < root→info then // node to be deleted is in the left subtree
		3.1: root→left ← deleteNodeRecursive(root→left, data) // recursively delete the data from the left subtree
	4: Else If root→info < data then // node to be deleted is in the right subtree
		4.1: root→right ← deleteNodeRecursive(root→right, data) // recursively delete the data from the right subtree
	5: Else // else root is to be deleted
		5.1: If root→left = NULL // there is no left child
			5.1.1: temp ← root→right
			5.1.2: ReturnNode(root) // delete root
			5.1.3: Return temp // return the right subtree, so that it becomes the root 
		5.2: Else If root→right = NULL // there is no right child
			5.2.1: temp ← root→left
			5.2.2: ReturnNode(root) // delete root
			5.2.3: return temp // return the left subtree, so that it becomes the root
		5.3: EndIf
		5.4: temp ← findMin(root→right) // get the node with the minimum value from the right subtree
		5.5: root→info ← temp→info // delete the root's data
		5.6: root→right ← deleteNodeRecursive(root→right, temp→info) // recursively delete the temp node since it has been moved up to root
	6: EndIf
	7: Return root // return the address of new root node
8: End Procedure

				Procedure inorderRecursive (root)

// Inorder traverses a tree recursively
// root is the pointer to the root node

Steps:-

1: Start
	2: If root ≠ NULL then // tree is not empty
		2.1: inorderRecursive(root→left) // recursively traverse the left subtree
		2.2: Print root→info // print the root's data
		2.3: inorderRecursive(root→right) // recursively traverse the right subtree
	3: EndIf
4: End Procedure

				Procedure preorderRecursive (root)

// Preorder traverses a tree recursively
// root is the pointer to the root node

Steps:-

1: Begin Procedure
	2: If root ≠ NULL then // tree is not empty
		2.1: Print root→info // print the root's data
		2.2: preorderRecursive(root→left) // recursively traverse the left subtree
		2.3: preorderRecursive(root→right) // recursively traverse the right subtree
	3: EndIf
4: End Procedure

				Procedure postorderRecursive (root)

// Postorder traverses a tree recursively
// root is the pointer to the root node

Steps:-

1: Begin Procedure
	2: If root ≠ NULL then // tree is not empty
		2.1: postorderRecursive(root→left) // recursively traverse the left subtree
		2.2: postorderRecursive(root→right) // recursively traverse the right subtree
		2.3: Print root→info // print the root's data
	3: EndIf
4: End Procedure

				Procedure eraseTree (root)
Steps:-

1: Begin Procedure
    2: If root ≠ NULL then // tree is not empty
        2.1: eraseTree(root→left) // recursively erase the left subtree
        2.2: eraseTree(root→right) // recursively erase the right subtree
        2.3: ReturnNode(root) // deletes the root node
        2.4: root = NULL
    3: EndIf
4: End Procedure

				Procedure searchNode (root, target, par, loc)

// uses iterative approach to find the target, modifies loc to contain the address of target node and par to contain the address of its parent
// root is the pointer to the root node

Steps:-
1: Begin Procedure
	2: If root = NULL then // tree is empty
		2.1: par ← NULL
		2.2: loc ← NULL
		2.3: Return
	3: EndIf
	4: If target = root→info then // if target is in the root node
		4.1: par ← NULL
		4.2: loc ← root
		4.3: Return
	5: EndIf
	// initialise save and ptr pointers which will be used to traverse
	6: save ← root
	// if target is less than root element, the target must be in the left subtree
	7: If target < root→info then
		7.1: ptr = root→left
	// else it would be in the right subtree
	8: Else
		8.1: ptr ← root→right
	9: EndIf
	// use a loop to search the tree
	10: While ptr ≠ NULL do
		10.1: If target = ptr→info then
			10.1.1: par ← save
			10.1.2: loc ← ptr
			10.1.3: Return
		10.2: EndIf
		// traverse further into the tree
		// increment ptr and save
		10.3: save ← ptr
		10.4: If target < ptr→info then
			10.4.1: ptr ← ptr→left
		10.5: Else
			10.5.1: ptr ← ptr→right
		10.6: EndIf
	11: EndWhile
	// we reach here when the search is unsuccessful
	12: par ← save
	13: loc ← NULL
14: End Procedure

				Procedure insertNodeIterative (root, data)

Steps:-

1: Begin Procedure
	2: searchNode(root, data, par, loc) // search the element first
	3: If loc ≠ NULL then // the data already exists, can't be inserted again
		3.1: Return
	4: EndIf
	5: loc ← createNode(data) // else, create a new node with the provided data
	6: If par = NULL then // this means, the tree is empty
		6.1: root ← loc // so new node must become the root
	7: Else If data < par→info then
		7.1: par→left ← loc
	8: Else
		8.1: par→right ← loc
	9: EndIf
10: End Procedure

				Procedure deleteNodeIterative (root, target)

Steps:-

1: Begin Procedure
	2: searchNode(root, target, par, loc)
	3: If loc = NULL then
		3.1: Print target, " not in tree, so it couldn't be deleted."
		3.2: Return
	4: EndIf
	5: If loc→left ≠ NULL && loc→left ≠ NULL then // both child exists
		5.1: deleteParentOfTwo(root, par, loc)
	6: Else // single or no child
		6.1: deleteSingleParent(root, par, loc)
	7: EndIf
8: End Procedure

				Procedure deleteSingleParent (root, par, loc)

Steps:-
1: Begin Procedure
	// loc is the node to be deleted, "child" is the child of loc
	2: If loc→left = NULL AND loc→right = NULL then // loc is childless
		child ← NULL
	3: Else If loc→left ≠ NULL then // left child exists
		3.1: child ← loc→left
	4: Else // right child exists
		4.1: child ← loc→right
	5: EndIf
	6: If par ≠ NULL then // parent exists
		6.1: If loc = par→left then // if loc is parent's left child
			6.1.1: par→left ← child // parent inherits loc's only child as its left child
		6.2: Else // else loc must be parent's right child
			6.2.1: par→right ← child // parent inherits loc's only child as its  right child
	7: Else // loc was the root node, so delete the root
		7.1: root ← child
	8: EndIf
	9: ReturnNode(loc) // finally delete loc
10: End Procedure

				Procedure deleteParentOfTwo (root, par, loc)

Steps:-

1: Begin Procedure
	// Find the inorder successor of loc, by going to the left most node of right subtree of loc
	2: parsuc ← loc
	3: suc ← loc→right
	4: While suc→left ≠ NULL do
		4.1: parsuc ← suc
		4.2: suc ← suc→left
	5: EndWhile
	6: loc→info ← suc→info // replace loc's data with its inorder successor, effectively deleting the node
	7: deleteSingleParent(root, parsuc, suc) // delete the inorder successor leaf node
8: EndProcedure

					Procedure push (top, tNode)

Steps:-

1: Begin Procedure
	2: newSNode ←getNode(SNODE)
	3: newSNode→treeNode ← tNode
	4: newSNode→link ← top
	5: top ← newSNode
6: End Procedure

				Procedure pop (top)

Steps:-

1: Begin Procedure
	2: If top = NULL then
		return NULL
	3: temp ← top
	3: popped ← temp→treeNode
	4: top ← top→link
	5: ReturnNode(temp)
	6: Return popped
7: End Procedure

				Procedure peek (top)

Steps:-

1: Begin Procedure
	2: If top = NULL then
		2.1: Return NULL
	3: EndIf
	4: Return top→treeNode
5: End Procedure

				Procedure isStackEmpty (top)

Steps:-

1: Begin Procedure
	2: If top = NULL then
		2.1: Return true
	3: Else
		3.1: Return false
	4: EndIf
5: End Procedure

// Left Subtree, Root, Right Subtree
				Procedure inorderIterative (root)

Steps:-

1: Begin Procedure
	2: top ← NULL // stack is initially NULL
	3: If root = NULL then // tree is empty, so exit the function
		3.1: Return
	4: EndIf
	5: current ← root
	6: While current ≠ NULL OR isStackEmpty(top) = false do
		6.1: While current ≠ NULL do // keep pushing the left nodes into the stack
			6.1.1: push(top, current)
			6.1.2: current ← current→left
		6.2: EndWhile
		6.3: current ← pop(top) // pop a node from the stack
		6.4: Print current→info // and print it
		6.5: current ← current→right // move to the right subtree\
	7: EndWhile
8: End Procedure

// Root, Left Subtree, Right Subtree
				Procedure preorderIterative (root)

Steps:-

1: Begin Procedure
	2: top ← NULL // initialise stack as empty
	3: If root = NULL then // tree is empty
		3.1: Return
	4: EndIf
	5: current ← root
	6: While current ≠ NULL do
		6.1: Print current→info
		// by pushing the right child before left child, we essentially get the left first when popping
		6.2: If current→right ≠ NULL then
			6.2.1: push(top, current→right)
		6.3: EndIf
		6.4: If current→left ≠ NULL then
			6.4.1: current ← current→left // move to left subtree
		6.5: Else
			6.5.1: current ← pop(top)
		6.6: EndIf
	7: EndWhile
8: End Procedure

// Left Subtree, Right Subtree, Root
				Procedure postorderIterative (root)

Steps:-

1: Begin Procedure
    2: top ← NULL // initialise empty stack
    3: If root = NULL then // tree is empty
        3.1: Return
    4: EndIf
    5: current ← root
    6: prev ← NULL // used to track previously visited node
    7: While (true) do // run atleast once, until stack is empty
        // Traverse the left subtree and push nodes onto the stack
        7.1: While current ≠ NULL do
            7.1.1: push(top, current)
            7.1.2: current ← current→left;
        7.2: EndWhile
        7.3: While current = NULL AND not isStackEmpty(top) do
            7.3.1: current ← peek(top)
            // If the right subtree is not yet processed or visited
            7.3.2: If current→right ≠ NULL AND current→right ≠ prev do
                7.3.2.1: current ← current→right
            7.3.3: Else
                7.3.3.1: Print current→info
                7.3.3.2: pop(top)
                7.3.3.3: prev ← current
                7.3.3.4: current ← NULL
            7.3.4: EndIf
        7.4: EndWhile
        7.5: If isStackEmpty(top) then
        	7.5.1: Exit Loop
        7.6: EndIf
    8: EndWhile
9: End Procedure

				Procedure getHeight (root)

Steps:-

1: Begin Procedure
	2: If root = NULL then
		2.1: Return 0
	3: EndIf
	4: leftHeight ← getHeight(root→left) // get height of the left subtree
	5: rightHeight ← getHeight(root→right) // get height of the right subtree
	// choose the greater value and increment it by one, to get the actual height of this tree
	6: If leftHeight > rightHeight then
		6.1: Return (leftHeight + 1)
	7: Else
		7.1: Return (rightHeight + 1)
	8: EndIf
9: End Procedure

				Procedure levelOrderTraversal (root)

// level order traverses a binary tree

Steps:-

1: Begin Procedure
	2: If root = NULL then // tree is empty
		2.1: Return
	3: EndIf
	4: height ← getHeight(root)
	5: Print "Level order traversed elements are below:"
	6: For level = 0 to height - 1 do // print 
		6.1: printCurrentLevel(root, level)
		6.2: level ← level + 1
	7: EndFor
8: End Procedure

				Procedure printCurrentLevel (root, level)

// Prints the nodes in the current level

Steps:-

1: Begin Procedure
	2: If root = NULL OR level ≥ getHeight(root) then
		2.1: Return
	3: Else If level = 0 then
		3.1: Print root→info
	4: Else If level > 0 then
		4.1: printCurrentLevel(root→left, level - 1)
		4.2: printCurrentLevel(root→right, level - 1)
	5: EndIf
6: End Procedure

				Procedure countLeafNodes (root)

// returns the no of leaf nodes in a tree

Steps:-

1: Begin Procedure
	2: If root = NULL then
		2.1: Return 0
	3: Else If root→left = NULL AND root→right = NULL // root has no child
		3.1: Return 1
	4: Else
		4.1: Return (countLeafNodes(root→left) + countLeafNodes(root→right))
	5: EndIf
6: End Procedure

				Procedure countNonLeafNodes (root)

// Count the no of non leaf nodes and returns it

Steps:-

1: Begin Procedure
	2: If root = NULL OR (root→left = NULL AND root→right = NULL) then
		2.1: Return 0
	3: Else
		3.1: Return (1 + countNonLeafNodes(root→left) + countNonLeafNodes(root→right))
	4: EndIf
5: End Procedure

					Procedure mirrorTree (root)

// mirrors a tree by swapping all left and right childs

Steps:-

1: Begin Procedure
	2: If root = NULL then // tree is empty
		2.1: Return
	3: EndIf
	// mirror the subtrees as well
	4: mirrorTree(root→left)
	5: mirrorTree(root→right)
	// swap the left child with the right child
	6: temp ← root→left
	7: root→left ← root→right
	8: root→right ← temp
9: End Procedure


				Procedure isBST(root)

// isBST wrapper function

Steps:-

1: Begin Procedure
    // Use the helper function with a large range to start with
    // INT_MAX and INT_MIN are the largest value and smallest an integer can be, respectively
    2: Return isBSTUtil(root, INT_MIN, INT_MAX)
3: End Procedure

				Procedure isBSTUtil (root, minVal, maxVal)

// isBST helper function, assumes the tree has no duplicate nodes

Steps:-

1: Begin Procedure
    // Base case: an empty tree is considered a valid binary search tree
    2: If root = NULL then
        2.1: Return true
	3: EndIf
    // check if the current node's data is within the specified range
    4: If root→info < minVal OR root→info > maxVal then
        4.1: Return false
	5: EndIf
    // recursively checks the left and right subtrees, updating the range accordingly
    6: Return (isBSTUtil(root→left, minVal, root→info - 1) && isBSTUtil(root→right, root→info + 1, maxVal))
7: End Procedure