				Algorithm (Merge Sort)

Input: Array size and list of elements
Output: Sorted array
Data Structure: One Dimensional Array

Steps:-

1: Start
2: size ← readArray(arr) // pass array base address and return size
3: Print "Before Sorting:"
4: printArray(arr, size)	
5: Print "After Sorting:"
6: mergeSort (arr, 0, size-1) // mergeSort is called using lower and upper bounds of the array
7: printArray(arr, size)
8: Stop


				Procedure readArray (arr)
				
// arr is array base address, returns size

Steps:-

1: Begin Procedure
	2: Print "Enter the size:"
	3: Read size
	4: If size < 1 then
		4.1: Print "Invalid size."
		4.2: Return -1
		4.3: End Procedure
	5: EndIf
	6: For i=0 to size-1 do // i is a loop counter
		6.1: Read arr[i]
	7: EndFor
	8: Return size
9: End Procedure


			Procedure printProcedure (arr, size)

// arr is array base address and size holds the no of elements of the array
	
Steps:-

1: Begin Procedure
	2: For i=0 to size-1 do
		2.1: Print arr[i]
	3: EndFor
4: End Procedure


				Procedure swap (x, y)

// Swaps two numbers
								
Steps:-

1: Begin Procedure
	2: temp←x // temp is a temporary variable to hold the 1st number
	3: x←y
	4: y←temp
5: End Procedure

				Procedure mergeSort (arr, lower, upper)

// lower and upper is the lower and upper bound of the array respectively
				
Steps:-

1: Begin Procedure
	2: If lower < upper then
		2.1: mid ← (lower + upper)/2 // the middle index
		// divide into subproblems
		2.2: mergeSort(arr, lower, mid) // this sorts the left subarray
		2.3: mergeSort(arr, mid + 1, upper) // this sorts the right subarray
		// both subarrays are sorted, now merge them
		2.4: merge (arr, lower, mid, upper)
	3: EndIf
4: End Procedure

				Procedure merge (arr, lower, mid, upper)
		
Steps:-

1: Begin Procedure
	2: leftSize ← mid - lower, rightSize ← upper - mid + 1
	3: i←0, j←0
	4: For k=0 to upper do // clone the left and right part in separate arrays
		4.1: If k < leftSize then
			4.1.1: left[i] = arr[k]
			4.1.2: i ← i + 1
		4.2: Else
			4.2.1: right[j] = arr[k]
			4.2.2: j ← j + 1
		4.3: EndIf
		4.4: k ← k + 1
	5: EndFor
	6: i←0, j←0, k←0
	7: While i < leftSize AND j < rightSize do // copy the elements in a sorted manner until one array is exhausted
		7.1: If left[i] ≤ right[j] then
			7.1.1: arr[k]←left[i]
			7.1.2: i ← i + 1
		7.2: Else
			7.2.1: arr[k]←right[j]
			7.2.2: j ← j + 1
		7.3: EndIf
	8: EndWhile
	9: While i < leftSize do // copy the remaining elements of left subarray, if any
		9.1: arr[k] ←left[i]
		9.2: k ← k + 1, i ← i + 1
	10: EndWhile
	11: While j < rightSize do // copy the remaining elements of right subarray, if any 
		11.1: arr[k] ← right[i]
		11.2: k ← k + 1, j ← j + 1
	12: EndWhile
13: End Procedure