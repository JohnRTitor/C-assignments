				Algorithm - Queue using Linked List

Input:- User's choice and inputs regarding the choices
Output:- Depends on users' choices
Data Structure:- Single Linked List

Steps:-

1: Start
2: q→front = NULL, q→rear = NULL
3: While (true) do
	3.1: Print "Queue operations:"
    3.2: Print "1. Enqueue, 2. Dequeue, 3. Display queue, 4. Exit"
    3.3: Print "Enter an option: "
    3.4: Read option
    3.5: Case option = 1
    	3.5.1: Print "Enter data to insert: "
        3.5.2: Read data
        3.5.3: enqueue(q, data)
        3.5.4: Print data, " successfully inserted."
    3.6: EndCase
	3.7: Case option = 2
    	3.7.1: data ← dequeue(q)
        3.7.2: If data ≠ -1 then
        	3.7.2.1: Print "Removed element:", data
        3.7.3: EndIf
	3.8: EndCase
	3.9: Case option = 3
		3.9.1: printQueue(q)
	3.10: EndCase
	3.11: Case option  = 4
    	3.11.1: Print "Program exited."
    	3.11.2: Exit Loop
    3.12: EndCase
	3.13: Case Default
    	3.13.1: Print "Invalid input. Please try again."
    3.14: EndCase
4: EndWhile
5: Stop

				Procedure createNode (data)
				
// the function gets data externally to insert in each node

Steps:-

1: Begin Procedure
	2: newNode ← getNode(NODE)
	3: If newNode = NULL then
		3.1: Print "Error: Memory allocation failed."
		3.2: Return NULL/Exit Program
	4: EndIf
	5: newNode→info ← data
	6: newNode→link ← NULL
	7: Return newNode
8: End Procedure

				Procedure printQueue (q)

// q is a QUEUE type structure which contains two members q->front and q->rear

Steps:-

1: Begin Procedure
	2: If q→front = NULL OR q→rear = NULL then
		2.1: Print "Error: Queue is empty."
		2.2: Return
	3: EndIf
	4: current ← q→front
	5: While current ≠ NULL do
		5.1: Print current→info
		5.2: current ← current→link
	6: EndWhile
7: End Procedure

				Procedure enqueue (q, data)
// data is the element to enqueue

Steps:-
1: Begin Procedure
	2: newNode ← createNode(data);
	3: If newNode = NULL then // insufficient memory
		3.1: Print "Error: No space left in queue."
		3.2: Return
	4: EndIf
	5: If q→front = NULL OR q→rear = NULL then // queue is empty
		5.1: q→front ← newNode
		5.2: q→rear ← newNode
		5.3: Return
	6: EndIf
	7: (q→rear)→link ← newNode
	8: q→rear = (q→rear)→link
9: End Procedure

				Procedure dequeue (q)

Steps:-
1: Begin Procedure
	2: If q->front = NULL do
		2.1: Print "Error: Queue is empty."
		2.2: Return -1
	3: EndIf
	4: data ← (q→front)→info
	5: If q→front = q→rear then // there is only one element
		5.1: ReturnNode(q→front)
		5.2: q→front = NULL
		5.3: q→rear = NULL
	6: Else // multiple elements present
		6.1: temp ← q→front;
		6.2: q→front ← (q→front)→link;
		6.3: ReturnNode(temp)
	7: EndIf
	8: Return data
9: End Procedure