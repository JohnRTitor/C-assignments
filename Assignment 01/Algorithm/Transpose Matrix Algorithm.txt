			Algorithm (Transpose Matrix)
			
Input: One matrix and its corresponding row and column count
Output: The transpose of the provided matrix
Data Structure: Matrix type structure, with members row, colm, and a two dimensional array 'data' containing matrix elements


// A, A_Trans are matrix type structure

Steps:-

1: Start
2: Print "Enter matrix A:"
3: readMatrix(A)
4: Print "Successfully transposed the matrix A."
5: printMatrix(A)
6: Print"The result is shown below."
7: transposeMatrix(A, A_Trans)
8: printMatrix(A_Trans)
9: Stop


			Procedure readMatrix (M)
// M is a matrix type structure

Steps:-

1: Begin Procedure
	2: Print "Enter row and column count:"
	3: Read A→row, A→colm
	4: If A→row < 1 OR A→colm < 1 then
		4.1: Print "Error: Invalid size."
		4.2: Stop
	5: EndIf
	6: For i=0 to less than M→row do // i is the loop counter for counting rows
		6.1: For j=0 to less than M→colm do // j is the loop counter for counting column
			6.1.1: Print "Element#", i+1, "-", j+1
			6.1.2: Read M→data[i][j]
			6.1.3: j ← j + 1
		6.2: EndFor
		6.3: i ← i + 1
	7: EndFor
8: End Procedure

			Procedure printMatrix (M)
		
Steps:-

1: Begin Procedure
	2: For i=0 to less than M→row do
		2.1: For j=0 to less than M→colm do
			2.1.1: Print M→data[i][j]
			2.1.2: j ← j + 1
		2.2: EndFor
		2.3: i ← i + 1
	3: EndFor
4: End Procedure


			Procedure transposeMatrix (A, A_Trans)

Steps:-

1: Begin Procedure
	2: A_Trans→row = A→colm, A_Trans→colm = A→row // A's column count becomes A_Trans's row count, and vice versa
	3: For i=0 to less than A_Trans→row do
		3.1: For j=0 to less than B_Trans→colm do
			3.1.1: A_Trans→data[i][j] = A→data[j][i] // A's column becomes A_Trans's row, A's row becomes A_Trans's column
			3.1.1: j ← j + 1
		3.2: EndFor
		3.3: i ← i + 1
	4: EndFor
5: End Procedure
