			Algorithm (Menu - Addition or Multiplication of two polynomials)
			
Input: Two polynomials (highest degree and coefficients of each term), along with menu option
Output: Result of the user's choice. Result of addition or result of multiplication
Data Structure: Polynomial type structure - Contains the highest degree and coefficients of each term including the constant term

Steps:-
// f, g, p, sum, product variables are of type structure polynomial

1: Start
2: Print "Enter f(x):"
3: readPolynomial(f)
4: Print "Enter g(x):"
5: readPolynomial(g)
6: While (true)
	6.1: Print "1 - Addition, 2 - Multiplication, 3 - Reenter f(x) and g(x), 4 - Display f(x) and g(x) or press 5 to exit. Choose an option:"
	6.2: Read option // option variable stores user's choice
	6.3: Case option=1
		6.3.1: addPolynomial(f, g, sum)
		6.3.2: Print "Addition of f(x) and g(x) is successful. Below is the result:"
		6.3.3: printPolynomial(sum)
	6.4: EndCase
	6.5: Case option=2
		6.5.1: multiplyPolynomial(f, g, product)
		6.5.2: Print "Multiplication of f(x) and g(x) is successful. Below is the result:"
		6.5.3: printPolynomial(product)
	6.6: EndCase
	6.7: Case option=3
		6.7.1: Print "Enter f(x)"
		6.7.2: readPolynomial(f)
		6.7.3: Print "Enter g(x)"
		6.7.4: readPolynomial(g)
	6.8: EndCase
	6.9: Case option=4
		6.9.1: Print "f(x) = "
		6.9.2: printPolynomial(f)
		6.9.3: Print "g(x) = "
		6.9.4: printPolynomial(g)
	6.10: EndCase
	6.11: Case option=5
		6.11.1: Print "Program exited".
		6.11.2: Stop
	6.12: EndCase
	6.13: Case default
		6.13.1: Print "Invalid input. Please try again."
	6.14: EndCase
7: EndWhile
8: Stop


			Procedure readPolynomial (p)

Steps:-

1: Begin Procedure
	2: zeroInitialise(p) // initialise to 0 to prevent errors
	3: Print "Enter the highest degree:"
	3: Read p→highestDeg
	4: If p→highestDeg < 0 then
		4.1: Print "Error: Please enter only positive integers."				
		4.3: End Procedure
	5: For i=p→highestDeg to 0 do // i is the loop counter
		5.1: Print "Enter the coeff of x^", i
		5.2: Read p→coeff[i]
		5.3: i ← i - 1
	6: EndFor
7: End Procedure
	
	
				Procedure printPolynomial (p)
	
Steps:-

1: Begin Procedure
	2: For i=p→highestDeg to 0 do // print on term by term basis
		2.1: If i < p→highestDeg AND p→coeff[i] > 0 then // takes care of the sign
			2.1.1: Print " + "
		2.2: Else If p→coeff[i] < 0 then
			2.2.1: Print " - "
		2.3: EndIf
		2.4: If p→coeff[i] ≠ 0 then
			2.4.1: Print abs(p→coeff[i]) // print the absolute value of x^i's coefficient, abs function returns the absolute value of a number
		2.5: EndIf
		2.6: If i > 1 // print the x^i part
			2.6.1: Print "x^", i
		2.7: Else If i = 1
			2.7.1: Print "x"
		2.8: EndIf
		2.9: i ← i - 1
	3: EndFor
4: End Procedure


					Procedure addPolynomial (f, g, sum)

// adds f and g and stores it in sum

Steps:-

1: Begin Procedure
	2: zeroInitialise(sum) // initialise to 0
	3: If f→highestDeg > g→highestDeg then // whichever is higher becomes the sum's highest degree
		3.1: sum→highestDeg = f→highestDeg
	4: Else
		4.1: sum→highestDeg = g→highestDeg
	5: EndIf
	6: For i=0 to sum→highestDeg
		6.1: sum→coeff[i] = f→coeff[i] + g→coeff[i] // add the coefficients of similar terms
		6.2: i ← i + 1
	7: EndFor
8: End Procedure


				Procedure multiplyPolynomial (f, g, product)

// multiplies f and g and stores it in product

Steps:-

1: Begin Procedure
	2: zeroInitialise(product) // initialise to 0
	3: product→highestDeg = f→highestDeg + g→highestDeg // the product's highest degree is the sum of the two polynomial's highest degree
	4: For i=0 to f→highestDeg do
		4.1: For j=0 to g→highestDeg do
			4.1.1: product→coeff[i + j] = product→coeff[i + j] f→coeff[i] × g→coeff[j] // multiply each term of a polynomial with another's each term and collect the results
			4.1.2: j ← j + 1
		4.2: EndFor
		4.3: i ← i + 1
	5: EndFor
6: End Procedure

				Procedure zeroInitialise (p)

// intialises all elements of a polynomial type to 0

Steps:-

1: Begin Procedure
	2: For i=0 to p→highestDeg do
		2.1: p→coeff[i] = 0
		2.2: i ← i + 1
	3: EndFor
4: End Procedure